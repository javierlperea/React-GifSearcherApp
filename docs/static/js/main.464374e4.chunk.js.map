{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getFetchGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAkDeA,EA3CK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGHC,mBAAS,IAHN,mBAGhCC,EAHgC,KAGpBC,EAHoB,KA2BvC,OACI,0BAAMC,SAjBW,SAACC,GAElBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEvCN,EAAc,OAQlB,OACQ,2BACIO,KAAK,OACLC,YAAY,SACZC,MAAQV,EACRW,SA3BU,SAACR,GAEvBF,EAAeE,EAAES,OAAOF,YCbnBG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGpC,OACI,yBAAKC,UAAU,yCACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCNHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVvB,kBAcZY,GAdY,4CAAH,sDCGPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECCb,SAACA,GAAc,IAAD,EACZtB,mBAAS,CAC/B4B,KAAM,GACNO,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAuBtC,OAjBAC,qBAAW,WAEPjB,EAAQC,GACHiB,MAAM,SAAAC,GAGPH,EAAU,CACNT,KAAMY,EACNL,SAAS,SAOlB,CAACb,IAEGc,EDtBwBK,CAAanB,GAAhCU,EAFyB,EAE9BJ,KAAaO,EAFiB,EAEjBA,QAcpB,OACI,oCACI,gCAAMb,EAAN,KACCa,GAAW,uBAAGjB,UAAU,kBAAb,cAFhB,IAGI,yBAAKA,UAAU,aAEPc,EAAOF,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIW,IAAKX,EAAIhB,IAELgB,UEOjBY,EA7BM,WAAM,MAGa3C,mBAAS,CAAC,QAHvB,mBAGhB4C,EAHgB,KAGJ7C,EAHI,KAavB,OACI,oCACI,gDACA,kBAAC,EAAD,CAAaA,cAAeA,IAFhC,IAGI,6BACA,4BAEQ6C,EAAWd,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CAASoB,IAAKpB,EAAUA,SAAUA,U,MCxB1DuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.464374e4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n/* ESTE COMPONENTE ME PERMITE ESCRIBIR LA INFORMACION \r\nEstoy recibiendo setCategories (es una funcion) como parametro y lo utilizo en handleSubmit por eso desestructuro los argumentos del componente  \r\n*/\r\n\r\nconst AddCategory = ( {setCategories} ) => {\r\n\r\n    // Utilizo un hooker\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // Permite escribir en el input\r\n    const handleInputChange = (e) => {\r\n        // Accede al texto del input y modifica el value de un input gracias al set del HOOK\r\n        setInputValue( e.target.value )\r\n    }\r\n    // Se ejecuta al presionar la tecla ENTER (necesito crear un form que contenga al input)\r\n    const handleSubmit = (e) => {\r\n        // No permite el refresh automatico\r\n        e.preventDefault();\r\n\r\n        //Revisa que se hayan escrito al menos 2 letras para hacer el submit\r\n        if(inputValue.trim().length > 2) {\r\n            //setCategories toma el array anterior y le agrega lo que se escribio en el input\r\n            setCategories( cats => [inputValue, ...cats] );\r\n            //limpia el texto del input\r\n            setInputValue('');\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    // Cuando agrego el <form> ya no necesito el fragment (<> </>)\r\n    return (\r\n        <form onSubmit={ handleSubmit }>    {/* <-- Produce el evento submit con ENTER */} \r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"Buscar\"\r\n                    value={ inputValue }\r\n                    onChange={ handleInputChange }  // <-- Sin esto no puedo escribir en el input\r\n                />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__pulse\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=yiURy2uxbDnHpislXC6lW0kKUYJx7NTU`;    // encodeURI() elimina los posibles espacios\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    // Recorro cada una de las imagenes y retorno un objeto con los datos que quiero utilizar\r\n    const gifs = data.map( img => {\r\n        return {    // <-- retorno un objeto\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url    // <-- ? pregunta si vienen las imagenes y recien las usa\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}\r\n","\r\nimport React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);  // <-- data:images cambia el nombre a images\r\n\r\n\r\n/*     //Creo un nuevo estado useState que inicializa con un array vacio\r\n    const [images, setImages] = useState([])\r\n\r\n    //Creo hook USEEFFECT que va a controlar no renderizar nuevamente las imagenes para evitar un bucle infinito\r\n    // Llama a la funcion y mediante un segundo argumento (array de dependencia) evita el bucle infinito\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( setImages )\r\n    }, [category])   // <-- Array de dependecia []\r\n */\r\n    \r\n    return (\r\n        <>\r\n            <h3> {category} </h3>\r\n            {loading && <p className=\"animate__flash\">Loading...</p> } {/* SI ESTA CARGANDO MUESTRA LOADING SINO NO MUESTRA NADA */}\r\n            <div className=\"card-grid\">\r\n                {   //al array vacio le coloco un id y un title\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            //utilizxo el operador spread para mandar cada una de las propiedades de la imagen como una propiedad independiente\r\n                            {...img} \r\n                            \r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","/* ESTO ES UN HOOK PERSONALIZADO PARA MOSTRAR UN MENSAJE DE CARGANDO*/\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport {getGifs} from '../helpers/getFetchGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n    // El efecto solo se dispara cuando cambia la categoria\r\n    useEffect( () => {\r\n\r\n        getGifs(category)\r\n            .then( imgs => {\r\n\r\n            //console.log(imgs)\r\n            setState ({     // <-- cambia la informacion\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n})\r\n\r\n\r\n                \r\n\r\n    }, [category])  // Cuando cambia esto se dispara el useEffect\r\n\r\n    return state; //{ data:[], loading: true }\r\n} ","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n/* ESTE COMPONENTE PERMITE RENDERIZAR LA INFORMACION\r\nPara poder mostrar un array como contenido HTML necesito recorrerlo, no puedo usar for, SE USA EL METODO map() que necesita un callback y tiene como argumento category, para que no de un error es importante usarlo con key (dentro del li de apertura) y luego usarlo en el cuerpo para que muestre los elementos no lo puedo hacer con un simple Array para ello uso un HOOk \r\n2. Utilizo el setCategories para aÃ±adir renderizar informacion por eso, envio esta funcion al componente <AddCategory />\r\n*/\r\n\r\nconst GifExpertApp = () => {\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball Z'] <--- no hacer asi\r\n    // Para esto se usan los hooks!!\r\n    const [categories, setCategories] = useState(['BMW']);\r\n\r\n/*  Utilizo la copia del string para agregar elementos al final o al inicio(segun ubicacion), si no lo hago de esta forma voy a modificar el string previo que tenia\r\n    const handleAdd = () => {\r\n        //----Forma 1 copiando string y agregando nuevo elemento\r\n        setCategories(['Ranma 1/2', ...categories]);\r\n        //----Forma 2 utiliza un callback con el estado anterior (cats = categories)\r\n        setCategories = (cats) => [...cats, 'HunterXHunter'];\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Searcher App</h2>\r\n            <AddCategory setCategories={setCategories} /> {/* Envio la referencia a setCategories*/}\r\n            <hr />\r\n            <ol> \r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid key={category} category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'; \nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}